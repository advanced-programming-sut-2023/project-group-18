Index: src/main/java/com/example/view/controllers/GameMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.view.controllers;\r\n\r\nimport com.example.controller.GameController;\r\n\r\nimport com.example.model.*;\r\nimport com.example.model.assets.Asset;\r\nimport com.example.model.assets.AssetType;\r\nimport com.example.model.buildings.BarCategory;\r\nimport com.example.model.buildings.BuildingType;\r\nimport com.example.view.Main;\r\nimport javafx.event.EventHandler;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Font;\r\nimport javafx.scene.text.Text;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class GameMenuController {\r\n    private final GameController controller = GameController.getInstance();\r\n    @FXML\r\n    private Pane pane;\r\n    @FXML\r\n    private BorderPane borderPane;\r\n\r\n    @FXML\r\n    private VBox bottom;\r\n    @FXML\r\n    private HBox imagesHBox;\r\n    @FXML\r\n    private HBox typesHBox;\r\n    private BuildingType selectedBuilding;\r\n    public static List<List<BuildingImage>> buildingListOfLists = new ArrayList<>(7);\r\n    public static List<List<BuildingImage>> assetListOfLists = new ArrayList<>(3);\r\n    public static BarCategory currentCategory = BarCategory.CASTLE;\r\n    public Alert alert = new Alert(Alert.AlertType.NONE);\r\n\r\n    public void initialize() {\r\n        Game.getInstance().setGameMenuController(this);\r\n        controller.getGame().setGameMap(100);\r\n        ArrayList<User> arrayList = new ArrayList<>();\r\n        arrayList.add(UsersData.getUsersData().getUserByUsername(\"user1\"));\r\n        arrayList.add(UsersData.getUsersData().getUserByUsername(\"user2\"));\r\n        arrayList.add(UsersData.getUsersData().getUserByUsername(\"user3\"));\r\n        controller.getGame().makeNewGovernances(arrayList);\r\n        for (BarCategory barCategory : BarCategory.values()) {\r\n            if (!barCategory.equals(BarCategory.NONE)) {\r\n                ArrayList<BuildingImage> buildingImages = new ArrayList<>();\r\n                for (BuildingType buildingType : BuildingType.values()) {\r\n                    if (buildingType.getBarCategory().equals(barCategory)) {\r\n                        try {\r\n                            buildingImages.add(new BuildingImage(imagesHBox, buildingType.getName(), 80, this, false, \"buildings\"));\r\n                        } catch (Exception e) {\r\n                            System.out.println(buildingType.getName());\r\n                            System.out.println(e.getMessage());\r\n                        }\r\n                    }\r\n                }\r\n                buildingListOfLists.add(buildingImages);\r\n            }\r\n        }\r\n        for (AssetType assetType : AssetType.values()) {\r\n            ArrayList<BuildingImage> assetImages = new ArrayList<>();\r\n            for (Asset asset : Asset.values()) {\r\n                if (asset.getAssetType().equals(assetType)) {\r\n                    try {\r\n                        assetImages.add(new BuildingImage(imagesHBox, asset.getName(), 50, this, false, \"assets\"));\r\n                    } catch (Exception e) {\r\n                        System.out.println(asset.getName());\r\n                        System.out.println(e.getMessage());\r\n                    }\r\n                }\r\n            }\r\n            assetListOfLists.add(assetImages);\r\n        }\r\n        for (List<BuildingImage> buildingImages : buildingListOfLists) {\r\n            if (buildingImages.size() > 6) {\r\n                for (BuildingImage buildingImage : buildingImages) {\r\n                    buildingImage.setSize(45);\r\n                }\r\n            }\r\n        }\r\n        for (List<BuildingImage> buildingImages : assetListOfLists) {\r\n            if (buildingImages.size() > 6) {\r\n                for (BuildingImage buildingImage : buildingImages) {\r\n                    buildingImage.setSize(40);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void initMap() {\r\n        borderPane.setCenter(controller.getGame().getGameMap());\r\n        controller.getGame().getGameMap().addShortcuts();\r\n        //bottom.setBackground(new Background(new BackgroundFill(Color.GREEN)));\r\n        //bottom.setStyle(\"-fx-background-color: Green;\");\r\n        BackgroundSize backgroundSize = new BackgroundSize(1.00,\r\n                1.00,\r\n                true,\r\n                true,\r\n                false,\r\n                false);\r\n        BackgroundImage image = new BackgroundImage(new Image(Main.class.getResourceAsStream(\"/images/icons/menu.png\")),\r\n                BackgroundRepeat.NO_REPEAT,\r\n                BackgroundRepeat.NO_REPEAT,\r\n                BackgroundPosition.CENTER,\r\n                backgroundSize);\r\n        ArrayList<BuildingImage> typeList = new ArrayList<>();\r\n        ArrayList<BuildingImage> shopImages = new ArrayList<>();\r\n        for (AssetType assetType : AssetType.values()) {\r\n            shopImages.add(new BuildingImage(typesHBox, assetType.getName(), 30, this, true, \"assets\"));\r\n        }\r\n        for (BuildingImage assetType : shopImages) {\r\n            assetType.addToHBox();\r\n        }\r\n//        for (BarCategory barCategory : BarCategory.values()){\r\n//            if (!barCategory.equals(BarCategory.NONE))\r\n//                typeList.add(new BuildingImage(typesHBox, barCategory.getName(), 20, this, true,\"buildings\"));\r\n//        }\r\n        for (BarCategory barCategory : BarCategory.values()) {\r\n            if (!barCategory.equals(BarCategory.NONE))\r\n                typeList.add(new BuildingImage(typesHBox, barCategory.getName(), 20, this, true, \"buildings\"));\r\n        }\r\n        changeMenu(currentCategory);\r\n\r\n//        typeList.add(new BuildingImage(typesHBox, \"CastleBuilding\", 20));\r\n//        typeList.add(new BuildingImage(typesHBox, \"FarmBuilding\", 20));\r\n//        typeList.add(new BuildingImage(typesHBox, \"FoodProcessing\", 20));\r\n//        typeList.add(new BuildingImage(typesHBox, \"IndustryBuilding\", 20));\r\n//        typeList.add(new BuildingImage(typesHBox, \"TowerBuilding\", 20));\r\n//        typeList.add(new BuildingImage(typesHBox, \"TowerBuilding\", 20));\r\n//        typeList.add(new BuildingImage(typesHBox, \"WeaponBuilding\", 20));\r\n//        for (BuildingType buildingType : BuildingType.values()){\r\n//            if (buildingType.getBarCategory().equals(currentCategory)){\r\n//                try {\r\n//                    castleImages.add(new BuildingImage(imagesHBox, buildingType.getName(), 80));\r\n//                }\r\n//                catch (Exception e){\r\n//                    System.out.println(buildingType.getName());\r\n//                    System.out.println(e.getMessage());\r\n//                }\r\n//            }\r\n//        }\r\n        //BuildingImage buildingImage = new BuildingImage(imagesHBox, \"Barracks\",80);\r\n        //BuildingImage buildingImage1 = new BuildingImage(imagesHBox, \"mercenary post\",80);\r\n\r\n\r\n        setScribe(pane);\r\n        pane.toFront();\r\n        //bottom.setPrefHeight(300);\r\n        //bottom.setMinHeight(600);\r\n//        bottom.setStyle(\"-fx-background-color: green\");\r\n        bottom.setBackground(new Background(image));\r\n    }\r\n\r\n    private void setScribe(Pane pane) {\r\n        Governance governance = Game.getInstance().getCurrentGovernance();\r\n        Text popularity = new Text(Integer.toString(governance.getPopularityFactors().getPopularity()));\r\n        popularity.setFont(new Font(15));\r\n\r\n        Text treasury = new Text(Integer.toString(governance.getGold()));\r\n        treasury.setFont(new Font(15));\r\n\r\n        Text population = new Text(Integer.toString(governance.getPopulation()));\r\n        population.setFont(new Font(15));\r\n        VBox vBox = new VBox(popularity, treasury, population);\r\n        vBox.setSpacing(2);\r\n        vBox.setLayoutX(890);\r\n        vBox.setLayoutY(109);\r\n        pane.getChildren().add(vBox);\r\n    }\r\n\r\n    public void changeMenu(BarCategory barCategory) {\r\n        for (List<BuildingImage> buildingImages : buildingListOfLists) {\r\n            if (BuildingType.getBuildingTypeByName(buildingImages.get(0).getName()).getBarCategory().equals(barCategory)) {\r\n                imagesHBox.getChildren().removeAll(imagesHBox.getChildren());\r\n                for (BuildingImage buildingImage : buildingImages) {\r\n                    imagesHBox.getChildren().add(buildingImage.getImageView());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void showKeepMenu() {\r\n        PopularityFactors popularityFactors = Game.getInstance().getCurrentGovernance().getPopularityFactors();\r\n        imagesHBox.getChildren().removeAll(imagesHBox.getChildren());\r\n        VBox vBox1 = new VBox();\r\n        vBox1.setSpacing(10);\r\n        VBox vBox2 = new VBox();\r\n        vBox2.setSpacing(10);\r\n\r\n        vBox1.getChildren().add(getPopularityNodes(popularityFactors.getFoodFactor(), \"food\"));\r\n        vBox1.getChildren().add(getPopularityNodes(popularityFactors.getTaxFactor(), \"tax\"));\r\n        vBox1.getChildren().add(getPopularityNodes(popularityFactors.getFearFactor(), \"fear\"));\r\n\r\n        vBox2.getChildren().add(getPopularityNodes(popularityFactors.getReligiousFactor(), \"religion\"));\r\n        vBox2.getChildren().add(getPopularityNodes(popularityFactors.getAleFactor(), \"ale coverage\"));\r\n\r\n        imagesHBox.getChildren().addAll(vBox1, vBox2);\r\n\r\n    }\r\n\r\n    private HBox getPopularityNodes(int factor, String factorName) {\r\n        ImageView imageView = new ImageView();\r\n        Label label = new Label(Integer.toString(factor));\r\n        label.setFont(new Font(15));\r\n        imageView.setFitHeight(20);\r\n        imageView.setFitWidth(20);\r\n        Label name = new Label(factorName);\r\n        if (factor < 0) {\r\n            label.setTextFill(Color.RED);\r\n            imageView.setImage(new Image(GameMenuController.class.getResource(\"/popularityFactors/1.jpg\").toExternalForm()));\r\n        } else if (factor == 0) {\r\n            label.setTextFill(Color.YELLOW);\r\n            imageView.setImage(new Image(GameMenuController.class.getResource(\"/popularityFactors/2.jpg\").toExternalForm()));\r\n        } else {\r\n            label.setTextFill(Color.GREEN);\r\n            imageView.setImage(new Image(GameMenuController.class.getResource(\"/popularityFactors/3.jpg\").toExternalForm()));\r\n        }\r\n        HBox hBox = new HBox(label, imageView, name);\r\n        hBox.setSpacing(20);\r\n        return hBox;\r\n    }\r\n\r\n    public void changeShopAssetType(AssetType assetType) {\r\n        System.out.println(assetType.getName());\r\n        for (List<BuildingImage> assetImages : assetListOfLists) {\r\n            if (Asset.getAssetByName(assetImages.get(0).getName()).getAssetType().equals(assetType)) {\r\n                imagesHBox.getChildren().removeAll(imagesHBox.getChildren());\r\n                for (BuildingImage assetImage : assetImages) {\r\n                    assetImage.addToHBox();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void clickOnAsset(Asset asset) {\r\n        Governance governance = controller.getGame().getCurrentGovernance();\r\n        int stock = governance.getAssetCount(asset);\r\n        int buyPrice = asset.getBuyPrice() * 5;\r\n        int sellPrice = asset.getSellPrice() * 5;\r\n        Label stockLabel = new Label(\"Stock: \" + stock);\r\n        Button buyButton = new Button(\"Buy: \" + buyPrice);\r\n        buyButton.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if (governance.getGold() >= buyPrice) {\r\n                    if (governance.canAddAssetToStorage(asset, 5)) {\r\n                        governance.addAssetToStorage(asset, 5);\r\n//                        stockLabel.setText(\"Stock: \" + governance.getAssetCount(asset));\r\n                        alert.setAlertType(Alert.AlertType.CONFIRMATION);\r\n                        alert.setContentText(\"You bought successfully!\");\r\n                        clickOnAsset(asset);\r\n                    } else {\r\n                        alert.setAlertType(Alert.AlertType.ERROR);\r\n                        alert.setContentText(\"You haven't enough space\");\r\n                    }\r\n                } else {\r\n                    alert.setAlertType(Alert.AlertType.ERROR);\r\n                    alert.setContentText(\"You haven't enough gold.\");\r\n                }\r\n                alert.show();\r\n            }\r\n        });\r\n        Button sellButton = new Button(\"Sell: \" + asset.getSellPrice() * 5);\r\n        sellButton.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n            @Override\r\n            public void handle(MouseEvent mouseEvent) {\r\n                if (governance.canRemoveAssetFromStorage(asset, 5)) {\r\n                    governance.removeAssetFromStorage(asset, 5);\r\n                    alert.setAlertType(Alert.AlertType.CONFIRMATION);\r\n                    alert.setContentText(\"sold successfully\");\r\n                    alert.show();\r\n                } else {\r\n                    alert.setAlertType(Alert.AlertType.ERROR);\r\n                    alert.setContentText(\"You haven't enough asset\");\r\n                    alert.show();\r\n                }\r\n            }\r\n        });\r\n        cleanTypesHBox();\r\n        typesHBox.getChildren().addAll(stockLabel, buyButton, sellButton);\r\n\r\n    }\r\n\r\n    public BuildingType getSelectedBuilding() {\r\n        return selectedBuilding;\r\n    }\r\n\r\n    public void setSelectedBuilding(BuildingType selectedBuilding) {\r\n        this.selectedBuilding = selectedBuilding;\r\n        controller.getGame().getGameMap().setSelectedBuilding(selectedBuilding);\r\n    }\r\n\r\n    public void cleanTypesHBox() {\r\n        for (int i = typesHBox.getChildren().size() - 1; i > 2; i--) {\r\n            typesHBox.getChildren().remove(i);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/view/controllers/GameMenuController.java b/src/main/java/com/example/view/controllers/GameMenuController.java
--- a/src/main/java/com/example/view/controllers/GameMenuController.java	(revision 27741e39f7464008a46fa2bafb8de79e41dee3bc)
+++ b/src/main/java/com/example/view/controllers/GameMenuController.java	(date 1688133897345)
@@ -117,11 +117,12 @@
         ArrayList<BuildingImage> typeList = new ArrayList<>();
         ArrayList<BuildingImage> shopImages = new ArrayList<>();
         for (AssetType assetType : AssetType.values()) {
-            shopImages.add(new BuildingImage(typesHBox, assetType.getName(), 30, this, true, "assets"));
+            BuildingImage shopImage = new BuildingImage(typesHBox, assetType.getName(), 30, this, true, "assets");
+            shopImage.addToHBox();
+            shopImages.add(shopImage);
         }
-        for (BuildingImage assetType : shopImages) {
-            assetType.addToHBox();
-        }
+        shopImages.add(new BuildingImage(typesHBox, "trade", 30, this, true, "assets"));
+        shopImages.get(shopImages.size() - 1).addToHBox();
 //        for (BarCategory barCategory : BarCategory.values()){
 //            if (!barCategory.equals(BarCategory.NONE))
 //                typeList.add(new BuildingImage(typesHBox, barCategory.getName(), 20, this, true,"buildings"));
@@ -306,4 +307,35 @@
             typesHBox.getChildren().remove(i);
         }
     }
+
+    public HBox getImagesHBox() {
+        return imagesHBox;
+    }
+
+    public HBox getTypesHBox() {
+        return typesHBox;
+    }
+
+    public void clearImagesHBox(){
+        imagesHBox.getChildren().clear();
+    }
+    public void clearTypesHBox(){
+        typesHBox.getChildren().clear();
+    }
+    public GameController getController() {
+        return controller;
+    }
+
+    public static List<List<BuildingImage>> getBuildingListOfLists() {
+        return buildingListOfLists;
+    }
+
+    public static List<List<BuildingImage>> getAssetListOfLists() {
+        return assetListOfLists;
+    }
+
+    public void addTradeIcon(){
+        BuildingImage buildingImage = new BuildingImage(typesHBox, "trade", 30, this, true, "assets");
+        buildingImage.addToHBox();
+    }
 }
Index: src/main/java/module-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module com.example {\r\n    requires javafx.controls;\r\n    requires javafx.fxml;\r\n    requires com.google.gson;\r\n    requires javafx.media;\r\n    \r\n    \r\n    opens com.example.view to javafx.fxml;\r\n    opens com.example.view.controllers to javafx.fxml;\r\n    opens com.example.model to com.google.gson;\r\n    exports com.example.view;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/module-info.java b/src/main/java/module-info.java
--- a/src/main/java/module-info.java	(revision 27741e39f7464008a46fa2bafb8de79e41dee3bc)
+++ b/src/main/java/module-info.java	(date 1688150874199)
@@ -3,10 +3,10 @@
     requires javafx.fxml;
     requires com.google.gson;
     requires javafx.media;
-    
+
     
     opens com.example.view to javafx.fxml;
     opens com.example.view.controllers to javafx.fxml;
-    opens com.example.model to com.google.gson;
+    opens com.example.model to com.google.gson, javafx.base;
     exports com.example.view;
 }
\ No newline at end of file
Index: src/main/java/com/example/model/Trade.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.model;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport com.example.model.assets.Asset;\r\n\r\npublic class Trade {\r\n    private static int nextId;\r\n    private final int id;\r\n    private final Governance sender;\r\n    private final Governance accepter;\r\n    private final Asset resourceType;\r\n    private final int resourceAmount;\r\n    private final int price;\r\n    private final String message;\r\n    private String accepterMessage;\r\n    private int status;\r\n\r\n    public Trade(Governance sender, Governance accepter, Asset resourceType, int resourceAmount, int price, String message) {\r\n        id = nextId++;\r\n        this.sender = sender;\r\n        this.accepter = accepter;\r\n        this.resourceType = resourceType;\r\n        this.resourceAmount = resourceAmount;\r\n        this.price = price;\r\n        this.message = message;\r\n        status = 0;\r\n        sender.removeAssetFromStorage(resourceType, resourceAmount);\r\n        sender.getRequestList().add(this);\r\n        accepter.getTradeList().add(this);\r\n        accepter.getTradeNotifications().add(this);\r\n    }\r\n\r\n    public static Trade getTradebyId(int id, ArrayList<Trade> tradeList) {\r\n        for (Trade trade : tradeList)\r\n            if (trade.id == id) return trade;\r\n        return null;\r\n    }\r\n\r\n    public int getId() {\r\n        return id;\r\n    }\r\n\r\n    public Governance getSender() {\r\n        return sender;\r\n    }\r\n\r\n    public Governance getAccepter() {\r\n        return accepter;\r\n    }\r\n\r\n    public Asset getResourceType() {\r\n        return resourceType;\r\n    }\r\n\r\n    public int getResourceAmount() {\r\n        return resourceAmount;\r\n    }\r\n\r\n    public int getPrice() {\r\n        return price;\r\n    }\r\n\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n\r\n    private void changeTradeList(String message) {\r\n        sender.getRequestList().remove(this);\r\n        accepter.getTradeList().remove(this);\r\n        accepter.getTradeNotifications().remove(this);\r\n        sender.getTradeHistory().add(this);\r\n        accepter.getTradeHistory().add(this);\r\n        accepterMessage = message;\r\n    }\r\n\r\n    public void acceptTrade(String message) {\r\n        status = 1;\r\n        accepter.addAssetToStorage(resourceType, resourceAmount);\r\n        accepter.addGold(-price);\r\n        sender.addGold(price);\r\n        changeTradeList(message);\r\n    }\r\n\r\n    public void rejectTrade(String message) {\r\n        status = -1;\r\n        sender.addAssetToStorage(resourceType, resourceAmount);\r\n        changeTradeList(message);\r\n    }\r\n\r\n    public void cancelTrade() {\r\n        sender.addAssetToStorage(resourceType, resourceAmount);\r\n        sender.getRequestList().add(this);\r\n        accepter.getTradeList().add(this);\r\n        accepter.getTradeNotifications().remove(this);\r\n    }\r\n\r\n    private String statusString() {\r\n        if (status == 0) return \"Waiting for \" + accepter.getOwner().getUsername();\r\n        if (status == 1) return \"Accepted!\";\r\n        if (status == -1) return \"Rejected!\";\r\n        return null;\r\n    }\r\n\r\n\r\n    public String toStringTradeList() {\r\n        return \"From: \" + sender.getOwner().getUsername()\r\n            + \"\\n\\tTrade Id: \" + id\r\n            + \"\\n\\tResource Type: \" + resourceType.getName()\r\n            + \"\\n\\tResource Amount: \" + resourceAmount\r\n            + \"\\n\\tPrice: \" + price\r\n            + \"\\n\\tMessage: \" + message;\r\n    }\r\n\r\n    public String toStringRequestList() {\r\n        return \"To: \" + accepter.getOwner().getUsername()\r\n            + \"\\n\\tTrade Id: \" + id\r\n            + \"\\n\\tResource Type: \" + resourceType.getName()\r\n            + \"\\n\\tResource Amount: \" + resourceAmount\r\n            + \"\\n\\tPrice: \" + price\r\n            + \"\\n\\tMessage: \" + message;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Trade Status: \" + statusString()\r\n            + \"\\n\\tTrade Id: \" + id\r\n            + \"\\n\\tSender: \" + sender.getOwner().getUsername()\r\n            + \"\\n\\tAccepter: \" + accepter.getOwner().getUsername()\r\n            + \"\\n\\tResource Type: \" + resourceType.getName()\r\n            + \"\\n\\tResource Amount: \" + resourceAmount\r\n            + \"\\n\\tPrice: \" + price\r\n            + \"\\n\\tMessage: \" + message\r\n            + \"\\n\\tAccepter Message: \" + accepterMessage;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/model/Trade.java b/src/main/java/com/example/model/Trade.java
--- a/src/main/java/com/example/model/Trade.java	(revision 27741e39f7464008a46fa2bafb8de79e41dee3bc)
+++ b/src/main/java/com/example/model/Trade.java	(date 1688162744650)
@@ -11,23 +11,24 @@
     private final Governance accepter;
     private final Asset resourceType;
     private final int resourceAmount;
-    private final int price;
+    private final boolean donate;
     private final String message;
     private String accepterMessage;
     private int status;
 
-    public Trade(Governance sender, Governance accepter, Asset resourceType, int resourceAmount, int price, String message) {
+    public Trade(Governance sender, Governance accepter, Asset resourceType, int resourceAmount, boolean donate, String message) {
         id = nextId++;
         this.sender = sender;
         this.accepter = accepter;
         this.resourceType = resourceType;
         this.resourceAmount = resourceAmount;
-        this.price = price;
+        this.donate = donate;
         this.message = message;
         status = 0;
-        sender.removeAssetFromStorage(resourceType, resourceAmount);
-        sender.getRequestList().add(this);
+        //sender.removeAssetFromStorage(resourceType, resourceAmount);
+        sender.getTradeList().add(this);
         accepter.getTradeList().add(this);
+        accepter.getRequestList().add(this);
         accepter.getTradeNotifications().add(this);
     }
 
@@ -57,17 +58,14 @@
         return resourceAmount;
     }
 
-    public int getPrice() {
-        return price;
-    }
-
     public int getStatus() {
         return status;
     }
 
     private void changeTradeList(String message) {
-        sender.getRequestList().remove(this);
+        accepter.getRequestList().remove(this);
         accepter.getTradeList().remove(this);
+        sender.getTradeList().remove(this);
         accepter.getTradeNotifications().remove(this);
         sender.getTradeHistory().add(this);
         accepter.getTradeHistory().add(this);
@@ -76,15 +74,19 @@
 
     public void acceptTrade(String message) {
         status = 1;
-        accepter.addAssetToStorage(resourceType, resourceAmount);
-        accepter.addGold(-price);
-        sender.addGold(price);
+        if (donate){
+            accepter.addAssetToStorage(resourceType, resourceAmount);
+            sender.removeAssetFromStorage(resourceType, resourceAmount);
+        }
+        else {
+            sender.addAssetToStorage(resourceType, resourceAmount);
+            accepter.removeAssetFromStorage(resourceType, resourceAmount);
+        }
         changeTradeList(message);
     }
 
     public void rejectTrade(String message) {
         status = -1;
-        sender.addAssetToStorage(resourceType, resourceAmount);
         changeTradeList(message);
     }
 
@@ -108,7 +110,6 @@
             + "\n\tTrade Id: " + id
             + "\n\tResource Type: " + resourceType.getName()
             + "\n\tResource Amount: " + resourceAmount
-            + "\n\tPrice: " + price
             + "\n\tMessage: " + message;
     }
 
@@ -117,7 +118,6 @@
             + "\n\tTrade Id: " + id
             + "\n\tResource Type: " + resourceType.getName()
             + "\n\tResource Amount: " + resourceAmount
-            + "\n\tPrice: " + price
             + "\n\tMessage: " + message;
     }
 
@@ -129,7 +129,6 @@
             + "\n\tAccepter: " + accepter.getOwner().getUsername()
             + "\n\tResource Type: " + resourceType.getName()
             + "\n\tResource Amount: " + resourceAmount
-            + "\n\tPrice: " + price
             + "\n\tMessage: " + message
             + "\n\tAccepter Message: " + accepterMessage;
     }
Index: src/main/java/com/example/model/Governance.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.model;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\nimport com.example.model.assets.Asset;\r\nimport com.example.model.assets.AssetType;\r\nimport com.example.model.buildings.*;\r\nimport com.example.model.people.*;\r\n\r\npublic class Governance {\r\n    private final User owner;\r\n    private final ArrayList<Building> buildings;\r\n    private final ArrayList<Soldier> soldiers;\r\n    private final ArrayList<Worker> workers;\r\n    private final HashMap<AssetType, HashMap<Asset, Integer>> assets;\r\n    private final PopularityFactors popularityFactors;\r\n    private int gold;\r\n    private int nonMilitaryCharacters;\r\n    private int remainingNonMilitary;\r\n    private final ArrayList<Trade> tradeList;\r\n    private final ArrayList<Trade> requestList;\r\n    private final ArrayList<Trade> tradeHistory;\r\n    private final ArrayList<Trade> tradeNotifications;\r\n    private int soldiersCreatedInTurn;\r\n    private Unit lord;\r\n\r\n    public Governance(User owner) {\r\n        this.owner = owner;\r\n        buildings = new ArrayList<>();\r\n        soldiers = new ArrayList<>();\r\n        workers = new ArrayList<>();\r\n        assets = Asset.getAllAssets();\r\n        popularityFactors = new PopularityFactors(this);\r\n        gold = 100;\r\n        nonMilitaryCharacters = 10;\r\n        this.remainingNonMilitary = 0;\r\n        tradeList = new ArrayList<>();\r\n        requestList = new ArrayList<>();\r\n        tradeHistory = new ArrayList<>();\r\n        tradeNotifications = new ArrayList<>();\r\n        soldiersCreatedInTurn = 0;\r\n    }\r\n\r\n    public User getOwner() {\r\n        return owner;\r\n    }\r\n\r\n    public PopularityFactors getPopularityFactors() {\r\n        return popularityFactors;\r\n    }\r\n\r\n    public int getGold() {\r\n        return gold;\r\n    }\r\n\r\n    public int getNonMilitaryCharacters() {\r\n        return nonMilitaryCharacters;\r\n    }\r\n\r\n    public ArrayList<Soldier> getSoldiers() {\r\n        return soldiers;\r\n    }\r\n\r\n    public HashMap<AssetType, HashMap<Asset, Integer>> getAssets() {\r\n        return assets;\r\n    }\r\n\r\n    protected ArrayList<Trade> getTradeList() {\r\n        return tradeList;\r\n    }\r\n\r\n    protected ArrayList<Trade> getRequestList() {\r\n        return requestList;\r\n    }\r\n\r\n    protected ArrayList<Trade> getTradeHistory() {\r\n        return tradeHistory;\r\n    }\r\n\r\n    protected ArrayList<Trade> getTradeNotifications() {\r\n        return tradeNotifications;\r\n    }\r\n\r\n    public void addNonMilitaryCharacters(int nonMilitaryCharacters) {\r\n        this.nonMilitaryCharacters += nonMilitaryCharacters;\r\n    }\r\n\r\n    public void addGold(int gold) {\r\n        this.gold += gold;\r\n    }\r\n\r\n\r\n    public boolean canAcceptTrade(int id) {\r\n        Trade trade = Trade.getTradebyId(id, tradeList);\r\n        if (trade == null) return false;\r\n        return trade.getPrice() <= gold;\r\n    }\r\n\r\n    public void acceptTrade(int id, String meesage) {\r\n        Trade.getTradebyId(id, tradeList).acceptTrade(meesage);\r\n    }\r\n\r\n    public void rejectTrade(int id, String message) {\r\n        Trade.getTradebyId(id, tradeList).rejectTrade(message);\r\n    }\r\n\r\n    public void cancelTrade(int id) {\r\n        Trade.getTradebyId(id, requestList).cancelTrade();\r\n    }\r\n\r\n    public void requestTrade(Governance accepter, Asset resourceType, int resourceAmount, int price, String message) {\r\n        new Trade(this, accepter, resourceType, resourceAmount, price, message);\r\n    }\r\n\r\n    public String showNotifications() {\r\n        String result = \"Trade Notifications: \";\r\n        int index = 0;\r\n        for (Trade trade : tradeNotifications)\r\n            result += \"\\n\" + (++index) + \") \" + trade.toStringTradeList();\r\n        tradeNotifications.clear();\r\n        return result;\r\n    }\r\n\r\n    public String showTradeList() {\r\n        String result = \"Trade List: \";\r\n        int index = 0;\r\n        for (Trade trade : tradeList)\r\n            result += \"\\n\" + (++index) + \") \" + trade.toStringTradeList();\r\n        return result;\r\n    }\r\n\r\n    public String showRequestList() {\r\n        String result = \"Requst List: \";\r\n        int index = 0;\r\n        for (Trade trade : requestList)\r\n            result += \"\\n\" + (++index) + \") \" + trade.toStringRequestList();\r\n        return result;\r\n    }\r\n\r\n    public String showTradeHistory() {\r\n        String result = \"Trade History: \";\r\n        int index = 0;\r\n        for (Trade trade : tradeHistory)\r\n            result += \"\\n\" + (++index) + \") \" + trade.toString();\r\n        return result;\r\n    }\r\n\r\n\r\n    public void buyItem(Asset asset, int count) {\r\n        gold -= count * asset.getBuyPrice();\r\n        addAssetToStorage(asset, count);\r\n    }\r\n\r\n    public void sellItem(Asset asset, int count) {\r\n        gold += count * asset.getSellPrice();\r\n        removeAssetFromStorage(asset, count);\r\n    }\r\n\r\n    public String showPriceList() {\r\n        String result = \"Items:\";\r\n        for (AssetType assetType : assets.keySet()) {\r\n            result += \"\\n\\t\" + assetType.getName() + \"s:\";\r\n            for (Asset asset : assets.get(assetType).keySet())\r\n                result += \"\\n\\t\\t- \" + asset.toString() + \"{\" + assets.get(assetType).get(asset) + \"}\";\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public String showPopularityFactors() {\r\n        return \"Food rate: \" + popularityFactors.getFoodRate()\r\n            + \"\\nKinds of foods: \" + getKindsOfFoods()\r\n            + \"\\nTax rate: \" + popularityFactors.getTaxRate()\r\n            + \"\\nReligious Factor: \" + popularityFactors.getReligiousFactor()\r\n            + \"\\nFear rate: \" + popularityFactors.getFearRate()\r\n            + \"\\nFear buildings\" + popularityFactors.getFearBuildings()\r\n            + \"\\nAle coverage: \" + popularityFactors.getAleCoverage();\r\n    }\r\n\r\n    public int showPopularity() {\r\n        return popularityFactors.getPopularity();\r\n    }\r\n\r\n    public String showFoodList() {\r\n        return \"Apple: \" + assets.get(AssetType.FOOD).get(Asset.APPLE)\r\n            + \"\\nMeat: \" + assets.get(AssetType.FOOD).get(Asset.MEAT)\r\n            + \"\\nCheese: \" + assets.get(AssetType.FOOD).get(Asset.CHEESE)\r\n            + \"\\nBread\" + assets.get(AssetType.FOOD).get(Asset.BREAD);\r\n    }\r\n\r\n    public void setFearRate(int fearRate) {\r\n        popularityFactors.setFearRate(fearRate);\r\n    }\r\n\r\n    public int getFearRate() {\r\n        return popularityFactors.getFearRate();\r\n    }\r\n\r\n\r\n\r\n    public void addSpecificAsset(Asset asset, int count) {\r\n        if (asset == null) return;\r\n        int governanceCount = assets.get(asset.getAssetType()).get(asset);\r\n        assets.get(asset.getAssetType()).put(asset, governanceCount + count);\r\n    }\r\n\r\n    public boolean canRemoveAssetFromStorage(Asset asset, int count) {\r\n        if (asset == null) return true;\r\n        int canRemove = 0;\r\n        for (Building building : buildings) {\r\n            if (!(building instanceof Storage)) continue;\r\n            Storage storage = (Storage) building;\r\n            if (!storage.isAssetCompatible(asset)) continue;\r\n            if (storage.isPossibleRemoveProduct(asset, count)) return true;\r\n            canRemove += storage.getAssetCount(asset);\r\n            if (canRemove >= count) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean canAddAssetToStorage(Asset asset, int count) {\r\n        if (asset == null) return true;\r\n        for (Building building : buildings) {\r\n            if (!(building instanceof Storage)) continue;\r\n            Storage storage = (Storage) building;\r\n            if (!storage.isAssetCompatible(asset)) continue;\r\n            count -= storage.remainingCapacity();\r\n            if (count <= 0) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void addAssetToStorage(Asset asset, int count) {\r\n        if (asset == null) return;\r\n        for (Building building : buildings) {\r\n            if (!(building instanceof Storage)) continue;\r\n            Storage storage = (Storage) building;\r\n            if (!storage.isAssetCompatible(asset)) continue;\r\n            int canAdd = count > storage.remainingCapacity() ? storage.remainingCapacity() : count;\r\n            storage.addProduct(asset, canAdd);\r\n            count -= canAdd;\r\n            if (count == 0) return;\r\n        }\r\n        addSpecificAsset(asset, count);\r\n    }\r\n\r\n    public void removeAssetFromStorage(Asset asset, int count) {\r\n        if (asset == null) return;\r\n        for (Building building : buildings) {\r\n            if (!(building instanceof Storage)) continue;\r\n            Storage storage = (Storage) building;\r\n            if (!storage.isAssetCompatible(asset)) continue;\r\n            int canRemove = count > storage.getAssetCount(asset) ? storage.getAssetCount(asset) : count;\r\n            storage.addProduct(asset, -canRemove);\r\n            count -= canRemove;\r\n            if (count == 0) return;\r\n        }\r\n        addSpecificAsset(asset, -count);\r\n    }\r\n\r\n\r\n\r\n    // public void addSoldier(Cell cell, SoldierType soldierType) {\r\n    //     soldiers.add(new Soldier(cell, this, soldierType));\r\n    // }\r\n\r\n    public int getKindsOfFoods() {\r\n        int result = 0;\r\n        for (Asset food : assets.get(AssetType.FOOD).keySet())\r\n            if (!assets.get(AssetType.FOOD).get(food).equals(0)) result++;\r\n        return result;\r\n    }\r\n\r\n    public int getFoodCount() {\r\n        int result = 0;\r\n        for (Asset food : assets.get(AssetType.FOOD).keySet())\r\n            result += assets.get(AssetType.FOOD).get(food);\r\n        return result;\r\n    }\r\n\r\n    public int getAssetCount(Asset asset) {\r\n        if (asset == null)\r\n            return 0;\r\n        return assets.get(asset.getAssetType()).get(asset);\r\n    }\r\n\r\n    public int getRemainingNonMilitary(){\r\n        return remainingNonMilitary;\r\n    }\r\n\r\n    public void updateRemainingNonMilitary(){\r\n        this.remainingNonMilitary = this.nonMilitaryCharacters;\r\n    }\r\n\r\n    public void removeRemainingCharacter(){\r\n        this.remainingNonMilitary --;\r\n    }\r\n\r\n    public int getSoldiersCreatedInTurn() {\r\n        return soldiersCreatedInTurn;\r\n    }\r\n\r\n    public void createSoldier(int count){\r\n        this.soldiersCreatedInTurn += count;\r\n    }\r\n\r\n\r\n    private void addPopulation() {\r\n        nonMilitaryCharacters += (getFoodCount() - workers.size()) / 2;\r\n    }\r\n\r\n    private void peopleEat() {\r\n        int haveToEat = nonMilitaryCharacters + workers.size();\r\n        for (Asset asset : assets.get(AssetType.FOOD).keySet()) {\r\n            int count = assets.get(AssetType.FOOD).get(asset);\r\n            if (haveToEat <= count) {\r\n                removeAssetFromStorage(asset, haveToEat);\r\n                return;\r\n            }\r\n            removeAssetFromStorage(asset, count);\r\n            haveToEat -= count;\r\n        }\r\n    }\r\n\r\n    public Unit getLord() {\r\n        return lord;\r\n    }\r\n\r\n    protected void setLord() {\r\n        // this.lord = new Unit(this, UnitType.LORD, buildings.get(0).getTile());\r\n    }\r\n\r\n    public void getTaxFromPeople(){\r\n        int population = this.nonMilitaryCharacters + this.workers.size();\r\n        double taxRate = popularityFactors.getTaxCoefficient();\r\n        this.addGold((int)(population * taxRate));\r\n    }\r\n\r\n    public void run() {\r\n        getTaxFromPeople();\r\n        addPopulation();\r\n        peopleEat();\r\n    }\r\n\r\n    public ArrayList<Building> getBuildings() {\r\n        return buildings;\r\n    }\r\n\r\n    public int getPopulation() {\r\n        return nonMilitaryCharacters + workers.size();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/model/Governance.java b/src/main/java/com/example/model/Governance.java
--- a/src/main/java/com/example/model/Governance.java	(revision 27741e39f7464008a46fa2bafb8de79e41dee3bc)
+++ b/src/main/java/com/example/model/Governance.java	(date 1688164472606)
@@ -91,11 +91,11 @@
     }
 
 
-    public boolean canAcceptTrade(int id) {
-        Trade trade = Trade.getTradebyId(id, tradeList);
-        if (trade == null) return false;
-        return trade.getPrice() <= gold;
-    }
+//    public boolean canAcceptTrade(int id) {
+//        Trade trade = Trade.getTradebyId(id, tradeList);
+//        if (trade == null) return false;
+//        return trade.getPrice() <= gold;
+//    }
 
     public void acceptTrade(int id, String meesage) {
         Trade.getTradebyId(id, tradeList).acceptTrade(meesage);
@@ -109,8 +109,8 @@
         Trade.getTradebyId(id, requestList).cancelTrade();
     }
 
-    public void requestTrade(Governance accepter, Asset resourceType, int resourceAmount, int price, String message) {
-        new Trade(this, accepter, resourceType, resourceAmount, price, message);
+    public void requestTrade(Governance accepter, Asset resourceType, int resourceAmount, boolean donate, String message) {
+        new Trade(this, accepter, resourceType, resourceAmount, donate, message);
     }
 
     public String showNotifications() {
@@ -350,4 +350,9 @@
     public int getPopulation() {
         return nonMilitaryCharacters + workers.size();
     }
+
+    @Override
+    public String toString(){
+        return this.getOwner().getNickname();
+    }
 }
Index: src/main/java/com/example/model/assets/Asset.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.model.assets;\r\n\r\nimport java.util.HashMap;\r\n\r\npublic enum Asset {\r\n    BOW (\"bow\", AssetType.WEAPON, 10),\r\n    CROSSBOW (\"crossbow\", AssetType.WEAPON, 10),\r\n    SPEAR (\"spear\", AssetType.WEAPON, 10),\r\n    PIKE (\"pike\", AssetType.WEAPON, 10),\r\n    MACE (\"mace\", AssetType.WEAPON, 10),\r\n    SWORDS (\"swords\", AssetType.WEAPON, 10),\r\n    LEATHER_ARMOR (\"leather armor\", AssetType.WEAPON, 10),\r\n    METAL_ARMOR (\"metal armor\", AssetType.WEAPON, 10),\r\n    TORCH(\"Torch\", AssetType.WEAPON, 10),\r\n    SLING(\"Sling\", AssetType.WEAPON, 10),\r\n    SCIMITAR(\"Scimitar\", AssetType.WEAPON, 10),\r\n    ARABIAN_BOW(\"Bow\", AssetType.WEAPON, 10),\r\n    GREEK_FIRE(\"Greek Fire\", AssetType.WEAPON, 10),\r\n    ARABIAN_METAL_ARMOR(\"Metal Armour\", AssetType.WEAPON, 10),\r\n    STAFF(\"Staff\", AssetType.WEAPON, 10),\r\n    PICK_AXE(\"Pick Axe\", AssetType.WEAPON, 10),\r\n    MEAT (\"meat\", AssetType.FOOD, 10),\r\n    APPLE (\"apple\", AssetType.FOOD, 10),\r\n    CHEESE (\"cheese\", AssetType.FOOD, 10),\r\n    BREAD (\"bread\", AssetType.FOOD, 10),\r\n    \r\n    WHEAT (\"wheat\", AssetType.RESOURCE, 10),\r\n    FLOUR (\"flour\", AssetType.RESOURCE, 10),\r\n    HOPS (\"hops\", AssetType.RESOURCE, 10),\r\n    ALE (\"ale\", AssetType.RESOURCE, 10),\r\n    STONE (\"stone\", AssetType.RESOURCE, 10),\r\n    IRON (\"iron\", AssetType.RESOURCE, 10),\r\n    WOOD (\"wood\", AssetType.RESOURCE, 10),\r\n    PITCH (\"pitch\", AssetType.RESOURCE, 10);\r\n\r\n    private final String name;\r\n    private final AssetType assetType;\r\n    private final int price;\r\n\r\n    Asset(String name, AssetType assetType, int price) {\r\n        this.name = name;\r\n        this.assetType = assetType;\r\n        this.price = price;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public AssetType getAssetType() {\r\n        return assetType;\r\n    }\r\n\r\n    public int getBuyPrice() {\r\n        return price;\r\n    }\r\n\r\n    public int getSellPrice() {\r\n        return (price * 4) / 5;\r\n    }\r\n\r\n    public static Asset getAssetByName(String name) {\r\n        for (Asset asset : Asset.values())\r\n            if (asset.name.equals(name)) return asset;\r\n        return null;\r\n    }\r\n    \r\n    public static HashMap<AssetType, HashMap<Asset, Integer>> getAllAssets() {\r\n        final HashMap<AssetType, HashMap<Asset, Integer>> assets = new HashMap<>();\r\n        for (AssetType assetType : AssetType.values())\r\n            assets.put(assetType, new HashMap<>());\r\n        for (Asset asset : Asset.values())\r\n            assets.get(asset.assetType).put(asset, 0);\r\n        return assets;\r\n    }\r\n   \r\n    public static HashMap<Asset, Integer> getAllAssets(AssetType assetType) {\r\n        final HashMap<Asset, Integer> assets = new HashMap<>();\r\n        for (Asset asset : Asset.values())\r\n            if (asset.assetType.equals(assetType)) assets.put(asset, 0);\r\n        return assets;\r\n    }\r\n    \r\n\r\n    @Override\r\n    public String toString() {\r\n        return name + \" [Buy = \" + price + \"] [Sell = \" + getSellPrice() + \"] \";\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/model/assets/Asset.java b/src/main/java/com/example/model/assets/Asset.java
--- a/src/main/java/com/example/model/assets/Asset.java	(revision 27741e39f7464008a46fa2bafb8de79e41dee3bc)
+++ b/src/main/java/com/example/model/assets/Asset.java	(date 1688164559255)
@@ -83,8 +83,10 @@
     
 
     @Override
-    public String toString() {
-        return name + " [Buy = " + price + "] [Sell = " + getSellPrice() + "] ";
+//    public String toString() {
+//        return name + " [Buy = " + price + "] [Sell = " + getSellPrice() + "] ";
+//    }
+    public String toString(){
+        return name;
     }
-
 }
Index: src/main/java/com/example/model/BuildingImage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.model;\r\n\r\nimport com.example.model.assets.Asset;\r\nimport com.example.model.assets.AssetType;\r\nimport com.example.model.buildings.BarCategory;\r\nimport com.example.model.buildings.BuildingType;\r\nimport com.example.view.Main;\r\nimport com.example.view.controllers.GameMenuController;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.event.EventHandler;\r\n\r\npublic class BuildingImage {\r\n    private HBox imageHBox;\r\n    private String name;\r\n    private int size;\r\n    private ImageView imageView;\r\n    private GameMenuController gameMenuController;\r\n    private String where;\r\n\r\n    public BuildingImage(HBox imageHBox, String name, int size, GameMenuController gameMenuController, boolean type\r\n            , String where) {\r\n        this.imageHBox = imageHBox;\r\n        this.name = name;\r\n        this.size = size;\r\n        this.gameMenuController = gameMenuController;\r\n        this.where = where;\r\n        Image image = new Image(Main.class.getResourceAsStream(\"/images/\" + where + \"/\" + name + \".png\"));\r\n        imageView = new ImageView(image);\r\n        imageView.setFitHeight(size);\r\n        imageView.setFitWidth(size);\r\n        if (type && where.equals(\"buildings\")) {\r\n            imageHBox.getChildren().add(imageView);\r\n            imageView.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n                @Override\r\n                public void handle(MouseEvent mouseEvent) {\r\n                    gameMenuController.changeMenu(BarCategory.getBarCategoryByName(name));\r\n                }\r\n            });\r\n        } else if (!type && where.equals(\"buildings\")) {\r\n            imageView.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n                @Override\r\n                public void handle(MouseEvent mouseEvent) {\r\n                    gameMenuController.setSelectedBuilding(BuildingType.getBuildingTypeByName(name));\r\n                }\r\n            });\r\n        } else if (type && where.equals(\"assets\")) {\r\n            imageView.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n                @Override\r\n                public void handle(MouseEvent mouseEvent) {\r\n                    gameMenuController.cleanTypesHBox();\r\n                    gameMenuController.changeShopAssetType(AssetType.getAssetTypeByName(name));\r\n                }\r\n            });\r\n        } else {\r\n            imageView.setOnMouseClicked(new EventHandler<MouseEvent>() {\r\n                @Override\r\n                public void handle(MouseEvent mouseEvent) {\r\n                    gameMenuController.clickOnAsset(Asset.getAssetByName(name));\r\n                }\r\n            });\r\n        }\r\n        //imageHBox.getChildren().add(imageView);\r\n    }\r\n\r\n    public void addToHBox() {\r\n        imageHBox.getChildren().add(imageView);\r\n    }\r\n\r\n    public void removeOfHBox() {\r\n        imageHBox.getChildren().remove(imageView);\r\n    }\r\n\r\n    public HBox getImageHBox() {\r\n        return imageHBox;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getSize() {\r\n        return size;\r\n    }\r\n\r\n    public ImageView getImageView() {\r\n        return imageView;\r\n    }\r\n\r\n    public void setSize(int size) {\r\n        imageView.setFitHeight(size);\r\n        imageView.setFitWidth(size);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/model/BuildingImage.java b/src/main/java/com/example/model/BuildingImage.java
--- a/src/main/java/com/example/model/BuildingImage.java	(revision 27741e39f7464008a46fa2bafb8de79e41dee3bc)
+++ b/src/main/java/com/example/model/BuildingImage.java	(date 1688164455186)
@@ -6,11 +6,21 @@
 import com.example.model.buildings.BuildingType;
 import com.example.view.Main;
 import com.example.view.controllers.GameMenuController;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.scene.Node;
+import javafx.scene.control.*;
+import javafx.scene.control.cell.PropertyValueFactory;
 import javafx.scene.image.Image;
 import javafx.scene.image.ImageView;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.HBox;
 import javafx.event.EventHandler;
+import javafx.scene.layout.VBox;
+import javafx.stage.Popup;
+
+import java.util.ArrayList;
+import java.util.List;
 
 public class BuildingImage {
     private HBox imageHBox;
@@ -50,8 +60,241 @@
             imageView.setOnMouseClicked(new EventHandler<MouseEvent>() {
                 @Override
                 public void handle(MouseEvent mouseEvent) {
-                    gameMenuController.cleanTypesHBox();
-                    gameMenuController.changeShopAssetType(AssetType.getAssetTypeByName(name));
+                    if (name.equals("trade")){
+                        gameMenuController.cleanTypesHBox();
+                        gameMenuController.addTradeIcon();
+                        gameMenuController.clearImagesHBox();
+                        Button newSuggest = new Button("New trade suggestion");
+                        newSuggest.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                            @Override
+                            public void handle(MouseEvent mouseEvent) {
+                                gameMenuController.clearImagesHBox();
+                                for (Governance governance : gameMenuController.getController().getGame().getGovernances()){
+                                    Button button = new Button(governance.getOwner().getNickname());
+                                    button.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                        @Override
+                                        public void handle(MouseEvent mouseEvent) {
+                                            gameMenuController.clearTypesHBox();
+                                            ArrayList<BuildingImage> shopImages = new ArrayList<>();
+                                            for (AssetType assetType : AssetType.values()) {
+                                                BuildingImage shopImage = new BuildingImage(gameMenuController.getTypesHBox(), assetType.getName(), 30, gameMenuController, true, "assets");
+                                                shopImage.getImageView().setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                                    @Override
+                                                    public void handle(MouseEvent mouseEvent) {
+                                                        gameMenuController.changeShopAssetType(assetType);
+                                                        for (Node node : gameMenuController.getImagesHBox().getChildren()){
+                                                            ImageView imageView1 = (ImageView) node;
+                                                            imageView1.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                                                @Override
+                                                                public void handle(MouseEvent mouseEvent) {
+                                                                    gameMenuController.cleanTypesHBox();
+                                                                    gameMenuController.addTradeIcon();
+                                                                    Label label = new Label("amount: " + 0);
+                                                                    Button plus = new Button("+");
+                                                                    plus.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                                                        @Override
+                                                                        public void handle(MouseEvent mouseEvent) {
+                                                                            int amount = Integer.parseInt(label.getText().substring(8)) + 5;
+                                                                            label.setText("amount: " + amount);
+                                                                        }
+                                                                    });
+                                                                    Button mines = new Button("-");
+                                                                    mines.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                                                        @Override
+                                                                        public void handle(MouseEvent mouseEvent) {
+                                                                            int amount = Integer.parseInt(label.getText().substring(8));
+                                                                            if (amount == 0){
+                                                                                Alert alert = new Alert(Alert.AlertType.ERROR);
+                                                                                alert.setContentText("Invalid amount");
+                                                                                alert.show();
+                                                                            }
+                                                                            else label.setText("amount: " + (amount - 5));
+                                                                        }
+                                                                    });
+                                                                    Button donate = new Button("donate");
+                                                                    Button request = new Button("request");
+                                                                    TextField description = new TextField();
+                                                                    request.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                                                        @Override
+                                                                        public void handle(MouseEvent mouseEvent) {
+                                                                            int amount = Integer.parseInt(label.getText().substring(8));
+                                                                            Asset asset = getAssetByImageView(imageView1, assetType);
+                                                                            Trade requestTrade = new Trade(getCurrentGovernance(), governance, asset, amount,
+                                                                                    false, description.getText());
+                                                                        }
+                                                                    });
+                                                                    donate.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                                                        @Override
+                                                                        public void handle(MouseEvent mouseEvent) {
+                                                                            int amount = Integer.parseInt(label.getText().substring(8));
+                                                                            Asset asset = getAssetByImageView(imageView1, assetType);
+                                                                            if (getCurrentGovernance().canRemoveAssetFromStorage(asset, amount)){
+                                                                                Trade donateTrade = new Trade(getCurrentGovernance(), governance, asset, amount,
+                                                                                        true, description.getText());
+                                                                            }
+                                                                            else {
+                                                                                Alert alert = new Alert(Alert.AlertType.ERROR);
+                                                                                alert.setContentText("You don't have enough asset");
+                                                                                alert.show();
+                                                                            }
+
+                                                                        }
+                                                                    });
+                                                                    gameMenuController.getTypesHBox().getChildren().addAll(label,plus,mines,donate,request,description);
+                                                                }
+                                                            });
+                                                        }
+                                                    }
+                                                });
+                                                shopImage.addToHBox();
+                                                shopImages.add(shopImage);
+                                            }
+
+                                        }
+                                    });
+                                    gameMenuController.getImagesHBox().getChildren().add(button);
+                                }
+                            }
+                        });
+                        Button pastTrades = new Button("Past Trades");
+                        pastTrades.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                            @Override
+                            public void handle(MouseEvent mouseEvent) {
+                                Button sentTrades = new Button("Sent Trades");
+                                Button receivedTrades = new Button("Received Trades");
+                                sentTrades.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                    @Override
+                                    public void handle(MouseEvent mouseEvent) {
+                                        Popup popup = new Popup();
+                                        ArrayList<Trade> trades = new ArrayList<>();
+                                        for (Trade trade : getCurrentGovernance().getTradeList()){
+                                            if (trade.getSender().equals(getCurrentGovernance())){
+                                                trades.add(trade);
+                                            }
+                                        }
+                                        ObservableList<Trade> data = FXCollections.observableArrayList(trades);
+                                        TableView<Trade> table = new TableView<Trade>();
+                                        TableColumn idColumn = new TableColumn("id");
+                                        idColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("id"));
+                                        TableColumn nameColumn = new TableColumn("Sender");
+                                        nameColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("sender"));
+                                        nameColumn.setMinWidth(100);
+                                        TableColumn scoreColumn = new TableColumn("Accepter");
+                                        scoreColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("accepter"));
+                                        TableColumn timeColumn = new TableColumn("resourceType");
+                                        timeColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("resourceType"));
+                                        TableColumn hardColumn = new TableColumn<>("resourceAmount");
+                                        hardColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("resourceAmount"));
+                                        table.getColumns().addAll(idColumn,nameColumn, scoreColumn, timeColumn, hardColumn);
+                                        Button closeButton = new Button("Close");
+                                        table.setFixedCellSize(30);
+                                        VBox vBox = new VBox(table, closeButton);
+                                        table.setItems(data);
+                                        closeButton.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                            @Override
+                                            public void handle(MouseEvent mouseEvent) {
+                                                popup.hide();
+                                            }
+                                        });
+                                        popup.getContent().add(vBox);
+                                        popup.show(Main.getStage(),200,200);
+                                    }
+                                });
+                                receivedTrades.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                    @Override
+                                    public void handle(MouseEvent mouseEvent) {
+                                        Popup popup = new Popup();
+                                        ArrayList<Trade> trades = getCurrentGovernance().getRequestList();
+                                        ObservableList<Trade> data = FXCollections.observableArrayList(trades);
+                                        TableView<Trade> table = new TableView<Trade>();
+                                        TableColumn idColumn = new TableColumn("id");
+                                        idColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("id"));
+                                        TableColumn nameColumn = new TableColumn("Sender");
+                                        nameColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("sender"));
+                                        nameColumn.setMinWidth(100);
+                                        TableColumn scoreColumn = new TableColumn("Accepter");
+                                        scoreColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("accepter"));
+                                        TableColumn timeColumn = new TableColumn("resourceType");
+                                        timeColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("resourceType"));
+                                        TableColumn hardColumn = new TableColumn<>("resourceAmount");
+                                        hardColumn.setCellValueFactory(new PropertyValueFactory<Trade, String>("resourceAmount"));
+                                        table.getColumns().addAll(idColumn,nameColumn, scoreColumn, timeColumn, hardColumn);
+                                        Button closeButton = new Button("Close");
+                                        table.setFixedCellSize(30);
+                                        VBox acceptVBox = new VBox();
+                                        VBox declineVBox = new VBox();
+//                                        for (Trade trade : getCurrentGovernance().getTradeList()){
+//                                            if (trade.)
+//                                        }
+                                        for (int i = 0; i <= getCurrentGovernance().getRequestList().size(); i++){
+                                            Button button = new Button();
+                                            Button decButton = new Button();
+                                            button.setMinWidth(100);
+                                            decButton.setMinWidth(100);
+                                            if (i == 1) {
+                                                button.setMinHeight(28);
+                                                decButton.setMinHeight(28);
+                                            }
+                                            else if (i != 0) {
+                                                button.setMinHeight(30);
+                                                decButton.setMinHeight(30);
+                                            }
+                                            if (i != 0){
+                                                button.setText("Accept");
+                                                decButton.setText("Decline");
+                                                button.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                                    @Override
+                                                    public void handle(MouseEvent mouseEvent) {
+                                                        int index = acceptVBox.getChildren().indexOf(button) - 1;
+                                                        Trade trade = getCurrentGovernance().getRequestList().get(index);
+                                                        acceptVBox.getChildren().remove(button);
+                                                        declineVBox.getChildren().remove(index + 1);
+                                                        trade.acceptTrade("Accepted");
+                                                        ObservableList<Trade> data = FXCollections.observableArrayList(getCurrentGovernance().getRequestList());
+                                                        table.setItems(data);
+                                                    }
+                                                });
+                                                decButton.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                                    @Override
+                                                    public void handle(MouseEvent mouseEvent) {
+                                                        int index = acceptVBox.getChildren().indexOf(button) - 1;
+                                                        Trade trade = getCurrentGovernance().getRequestList().get(index);
+                                                        System.out.println(index);
+                                                        System.out.println(trade.toString());
+                                                        acceptVBox.getChildren().remove(button);
+                                                        declineVBox.getChildren().remove(index + 1);
+                                                        trade.rejectTrade("Rejected");
+                                                        ObservableList<Trade> data = FXCollections.observableArrayList(getCurrentGovernance().getRequestList());
+                                                        table.setItems(data);
+                                                    }
+                                                });
+                                            }
+                                            acceptVBox.getChildren().add(button);
+                                            declineVBox.getChildren().add(decButton);
+                                        }
+                                        HBox hBox = new HBox(table, acceptVBox, declineVBox);
+                                        VBox vBox = new VBox(hBox, closeButton);
+                                        table.setItems(data);
+                                        closeButton.setOnMouseClicked(new EventHandler<MouseEvent>() {
+                                            @Override
+                                            public void handle(MouseEvent mouseEvent) {
+                                                popup.hide();
+                                            }
+                                        });
+                                        popup.getContent().add(vBox);
+                                        popup.show(Main.getStage(),200,200);
+                                    }
+                                });
+                                gameMenuController.clearImagesHBox();
+                                gameMenuController.getImagesHBox().getChildren().addAll(sentTrades, receivedTrades);
+                            }
+                        });
+                        gameMenuController.getImagesHBox().getChildren().addAll(newSuggest, pastTrades);
+                    }
+                    else {
+                        gameMenuController.cleanTypesHBox();
+                        gameMenuController.changeShopAssetType(AssetType.getAssetTypeByName(name));
+                    }
                 }
             });
         } else {
@@ -69,6 +312,9 @@
         imageHBox.getChildren().add(imageView);
     }
 
+    public Governance getCurrentGovernance(){
+        return gameMenuController.getController().getGame().getCurrentGovernance();
+    }
     public void removeOfHBox() {
         imageHBox.getChildren().remove(imageView);
     }
@@ -93,4 +339,18 @@
         imageView.setFitHeight(size);
         imageView.setFitWidth(size);
     }
+
+    public Asset getAssetByImageView(ImageView imageView1, AssetType assetType){
+        Asset asset = null;
+        for (List<BuildingImage> list : GameMenuController.getAssetListOfLists()){
+            if (Asset.getAssetByName(list.get(0).getName()).getAssetType().equals(assetType)){
+                for (BuildingImage img : list){
+                    if (img.getImageView().equals(imageView1)){
+                        asset = Asset.getAssetByName(img.getName());
+                    }
+                }
+            }
+        }
+        return asset;
+    }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9741b086-0fb0-49df-848f-903a17d9d4fb\" name=\"Changes\" comment=\"building selection\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/resources/popularityFactors/1.jpg\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/resources/popularityFactors/2.jpg\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/resources/popularityFactors/3.jpg\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/model/BuildingImage.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/model/BuildingImage.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/model/Game.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/model/Game.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/model/PopularityFactors.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/model/PopularityFactors.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/model/buildings/BarCategory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/model/buildings/BarCategory.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/view/controllers/GameMenuController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/view/controllers/GameMenuController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/example/model/Game.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/example/model/Game.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/example/model/PopularityFactors.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/example/model/PopularityFactors.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/target/classes/com/example/view/controllers/GameMenuController.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/target/classes/com/example/view/controllers/GameMenuController.class\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"FxmlFile\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2QR3T8bkS02uWAvlog7BzFvoNq0\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;/Users/fraxea/Desktop/frAxeA/term2/AP/project/project-group18&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"f288306d-0141-4ba9-ad2b-a92a921ee550\" name=\"Changes\" comment=\"Bottom Bar completed\" />\r\n      <created>1685302575628</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1685302575628</updated>\r\n      <workItem from=\"1685302578417\" duration=\"8012000\" />\r\n      <workItem from=\"1685343278880\" duration=\"12000\" />\r\n      <workItem from=\"1685367005928\" duration=\"4887000\" />\r\n      <workItem from=\"1685437111415\" duration=\"10349000\" />\r\n      <workItem from=\"1685519946688\" duration=\"3165000\" />\r\n      <workItem from=\"1685526506935\" duration=\"11000\" />\r\n      <workItem from=\"1685526998168\" duration=\"7716000\" />\r\n      <workItem from=\"1685648124111\" duration=\"1277000\" />\r\n      <workItem from=\"1685706691121\" duration=\"1018000\" />\r\n      <workItem from=\"1685708022769\" duration=\"6239000\" />\r\n      <workItem from=\"1685716083539\" duration=\"2436000\" />\r\n      <workItem from=\"1685731115291\" duration=\"11751000\" />\r\n      <workItem from=\"1685809345327\" duration=\"4576000\" />\r\n      <workItem from=\"1685893029808\" duration=\"7172000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"tag\">\r\n      <created>1685305307071</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685305307071</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"testing prompt text for unmasked password\">\r\n      <created>1685310099246</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685310099246</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"textField passwordField style for password show try\">\r\n      <created>1685311845919</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685311845919</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"fixed show password hopefully\">\r\n      <created>1685442820352</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685442820352</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"half done slogan\">\r\n      <created>1685455932991</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685455932991</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"signup hopefully done\">\r\n      <created>1685483238774</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685483238774</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"security question and captcha\">\r\n      <created>1685713869397</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685713869397</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"a commit\">\r\n      <created>1685731152351</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685731152351</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"login when answered security question\">\r\n      <created>1685814050921</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685814050921</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"Main Menu\">\r\n      <created>1685814985857</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685814985857</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"start game\">\r\n      <created>1685979967030</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1685979967030</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"Bottom Bar completed\">\r\n      <created>1687941767024</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1687941767024</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"Bottom Bar completed\">\r\n      <created>1687941976394</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1687941976394</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"Bottom Bar completed\">\r\n      <created>1687942155173</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1687942155173</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"building selection\">\r\n      <created>1688063366380</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1688063366380</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"16\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"tag\" />\r\n    <MESSAGE value=\"testing prompt text for unmasked password\" />\r\n    <MESSAGE value=\"textField passwordField style for password show try\" />\r\n    <MESSAGE value=\"fixed show password hopefully\" />\r\n    <MESSAGE value=\"half done slogan\" />\r\n    <MESSAGE value=\"signup hopefully done\" />\r\n    <MESSAGE value=\"security question and captcha\" />\r\n    <MESSAGE value=\"a commit\" />\r\n    <MESSAGE value=\"login when answered security question\" />\r\n    <MESSAGE value=\"Main Menu\" />\r\n    <MESSAGE value=\"start game\" />\r\n    <MESSAGE value=\"Bottom Bar completed\" />\r\n    <MESSAGE value=\"add remainders\" />\r\n    <MESSAGE value=\"building selection\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"building selection\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/project_group_18$LoginMenuTest.ic\" NAME=\"LoginMenuTest Coverage Results\" MODIFIED=\"1683974377815\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 27741e39f7464008a46fa2bafb8de79e41dee3bc)
+++ b/.idea/workspace.xml	(date 1688238209188)
@@ -4,19 +4,21 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="9741b086-0fb0-49df-848f-903a17d9d4fb" name="Changes" comment="building selection">
-      <change afterPath="$PROJECT_DIR$/src/main/resources/popularityFactors/1.jpg" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/resources/popularityFactors/2.jpg" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/main/resources/popularityFactors/3.jpg" afterDir="false" />
+    <list default="true" id="f288306d-0141-4ba9-ad2b-a92a921ee550" name="Changes" comment="Shop added.">
+      <change afterPath="$PROJECT_DIR$/src/main/resources/images/assets/trade.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/example/model/BuildingImage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/model/BuildingImage.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/model/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/model/Game.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/model/PopularityFactors.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/model/PopularityFactors.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/model/buildings/BarCategory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/model/buildings/BarCategory.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/model/Governance.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/model/Governance.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/model/Trade.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/model/Trade.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/model/assets/Asset.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/model/assets/Asset.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/example/view/controllers/GameMenuController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/view/controllers/GameMenuController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/example/model/Game.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/example/model/Game.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/target/classes/com/example/model/PopularityFactors.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/example/model/PopularityFactors.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/module-info.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/com/example/model/Governance.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/example/model/Governance.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/com/example/model/Trade.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/example/model/Trade.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/com/example/model/assets/Asset.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/example/model/assets/Asset.class" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/target/classes/com/example/view/controllers/GameMenuController.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/com/example/view/controllers/GameMenuController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/target/classes/module-info.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/classes/module-info.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -34,7 +36,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="main" />
+        <entry key="$PROJECT_DIR$" value="new_Menus" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -59,13 +61,18 @@
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,
-    &quot;last_opened_file_path&quot;: &quot;/Users/fraxea/Desktop/frAxeA/term2/AP/project/project-group18&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/user/IdeaProjects/project-group-18/src/main/resources/images/assets&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
     &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
     &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
     &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;
   }
 }</component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="C:\Users\user\IdeaProjects\project-group-18\src\main\resources\images\assets" />
+    </key>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
@@ -88,6 +95,7 @@
       <workItem from="1685731115291" duration="11751000" />
       <workItem from="1685809345327" duration="4576000" />
       <workItem from="1685893029808" duration="7172000" />
+      <workItem from="1688237195349" duration="604000" />
     </task>
     <task id="LOCAL-00001" summary="tag">
       <created>1685305307071</created>
@@ -187,14 +195,7 @@
       <option name="project" value="LOCAL" />
       <updated>1687942155173</updated>
     </task>
-    <task id="LOCAL-00015" summary="building selection">
-      <created>1688063366380</created>
-      <option name="number" value="00015" />
-      <option name="presentableId" value="LOCAL-00015" />
-      <option name="project" value="LOCAL" />
-      <updated>1688063366380</updated>
-    </task>
-    <option name="localTasksCounter" value="16" />
+    <option name="localTasksCounter" value="15" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -225,8 +226,7 @@
     <MESSAGE value="start game" />
     <MESSAGE value="Bottom Bar completed" />
     <MESSAGE value="add remainders" />
-    <MESSAGE value="building selection" />
-    <option name="LAST_COMMIT_MESSAGE" value="building selection" />
+    <option name="LAST_COMMIT_MESSAGE" value="add remainders" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
     <SUITE FILE_PATH="coverage/project_group_18$LoginMenuTest.ic" NAME="LoginMenuTest Coverage Results" MODIFIED="1683974377815" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"FrameworkDetectionExcludesConfiguration\">\r\n    <file type=\"web\" url=\"file://$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MavenProjectsManager\">\r\n    <option name=\"originalFiles\">\r\n      <list>\r\n        <option value=\"$PROJECT_DIR$/pom.xml\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_X\" default=\"true\" project-jdk-name=\"openjdk-20 (3)\" project-jdk-type=\"JavaSDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 27741e39f7464008a46fa2bafb8de79e41dee3bc)
+++ b/.idea/misc.xml	(date 1688117070860)
@@ -11,5 +11,5 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="openjdk-20 (3)" project-jdk-type="JavaSDK" />
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="openjdk-20 (3)" project-jdk-type="JavaSDK" />
 </project>
\ No newline at end of file
